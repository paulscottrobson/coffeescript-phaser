// Generated by CoffeeScript 1.12.3
var Ball, MainState, PongGame, x,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PongGame = (function(superClass) {
  extend(PongGame, superClass);

  PongGame.TENNIS = 1;

  PongGame.SOCCER = 2;

  PongGame.SQUASH = 3;

  PongGame.PRACTICE = 4;

  function PongGame() {
    PongGame.__super__.constructor.call(this, 640, 480);
    this.state.add('main', MainState);
    this.state.start('main', true, false, 2);
  }

  return PongGame;

})(Phaser.Game);

MainState = (function() {
  function MainState() {
    this.currentGame = 0;
    this.scores = [0, 0];
  }

  MainState.prototype.init = function(gameID) {
    this.gameNumber = gameID;
    if (this.gameNumber !== this.currentGame) {
      console.log("Game", gameID);
      this.currentGame = gameID;
      this.scores = [0, 0];
      if (this.currentGame === PongGame.PRACTICE) {
        return this.scores = [0, null];
      }
    }
  };

  MainState.prototype.create = function() {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.createFrame();
    this.ball = new Ball(this);
    this.bats = [];
    this.scoreText = [this.createScoreText(this, 24, 16), null];
    if (this.scores[1] !== null) {
      return this.scoreText[1] = this.createScoreText(this, this.game.width - 128, 16);
    }
  };

  MainState.prototype.update = function() {
    return this.game.physics.arcade.collide(this.ball.sprite, this.frame);
  };

  MainState.prototype.createScoreText = function(state, x, y) {
    return state.game.add.text(x, y, "00", {
      font: "96px Arial",
      fill: "#FFFFFF",
      align: "center"
    });
  };

  MainState.prototype.createFrame = function() {
    var edgeSize, frameSize, i, results, x;
    console.log(this.currentGame);
    frameSize = 6;
    if (this.currentGame === PongGame.TENNIS || this.currentGame === PongGame.SOCCER) {
      this.createBox(this.game.width / 2 - frameSize / 2, 0, frameSize, this.game.height, false, true);
    }
    this.frame = this.game.add.group();
    this.createWall(0, 0, this.game.width, frameSize);
    this.createWall(0, this.game.height - frameSize, this.game.width, frameSize);
    if (this.currentGame === PongGame.SQUASH || this.currentGame === PongGame.PRACTICE) {
      this.createWall(0, 0, frameSize, this.game.height);
    }
    if (this.currentGame === PongGame.SOCCER) {
      results = [];
      for (x = i = 0; i <= 1; x = ++i) {
        edgeSize = this.game.height * 0.45;
        this.createWall(x * (this.game.width - frameSize), 0, frameSize, edgeSize);
        results.push(this.createWall(x * (this.game.width - frameSize), this.game.height - edgeSize, frameSize, edgeSize));
      }
      return results;
    }
  };

  MainState.prototype.createWall = function(x, y, w, h) {
    var wall;
    wall = this.createBox(x, y, w, h, w > h);
    wall.body.immovable = true;
    return this.frame.add(wall);
  };

  MainState.prototype.createBox = function(x, y, w, h, isDashed, isDecoration) {
    var box, newSprite, xDash;
    if (isDashed == null) {
      isDashed = false;
    }
    if (isDecoration == null) {
      isDecoration = false;
    }
    box = this.game.add.bitmapData(w, h);
    box.ctx.beginPath();
    box.ctx.rect(0, 0, w, h);
    box.ctx.fillStyle = "#FFFFFF";
    box.ctx.fill();
    if (isDashed) {
      xDash = 0;
      while (xDash < w) {
        xDash = xDash + 17;
        box.ctx.beginPath();
        box.ctx.rect(xDash, 0, 6, h);
        box.ctx.fillStyle = "#000000";
        box.ctx.fill();
        xDash = xDash + 6;
      }
    }
    newSprite = this.game.add.sprite(x, y, box);
    if (!isDecoration) {
      this.game.physics.arcade.enable(newSprite);
    }
    return newSprite;
  };

  return MainState;

})();

Ball = (function() {
  function Ball(state1) {
    this.state = state1;
    this.sprite = this.state.createBox(100, 100, 20, 20, false, false);
    this.sprite.body.velocity.x = 300;
    this.sprite.body.velocity.y = 300;
    this.sprite.body.bounce.x = 1;
    this.sprite.body.bounce.y = 1;
  }

  return Ball;

})();

x = new PongGame();
