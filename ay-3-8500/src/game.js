// Generated by CoffeeScript 1.12.3
var Ball, Bat, MainState, PongGame, x,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PongGame = (function(superClass) {
  extend(PongGame, superClass);

  PongGame.TENNIS = 1;

  PongGame.SOCCER = 2;

  PongGame.SQUASH = 3;

  PongGame.PRACTICE = 4;

  function PongGame() {
    PongGame.__super__.constructor.call(this, 640, 480);
    this.state.add('main', MainState);
    this.state.start('main', true, false, {
      game: 2,
      speed: 1,
      size: 1,
      angles: 1
    });
  }

  return PongGame;

})(Phaser.Game);

MainState = (function() {
  function MainState() {
    this.currentGame = 0;
    this.scores = [0, 0];
  }

  MainState.prototype.init = function(setup) {
    this.gameNumber = setup.game;
    this.ballSpeed = setup.speed;
    this.batSize = setup.size;
    this.fourangles = setup.angles !== 0;
    if (this.gameNumber !== this.currentGame) {
      this.currentGame = setup.game;
      this.scores = [0, 0];
      if (this.currentGame === PongGame.PRACTICE) {
        return this.scores = [0, null];
      }
    }
  };

  MainState.prototype.create = function() {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.frameGroup = this.game.add.group();
    this.createFrame();
    this.batGroup = this.game.add.group();
    this.bats = [];
    this.createBats();
    this.ball = new Ball(this);
    this.scoreText = [this.createScoreText(this, this.game.width / 2 - 120, 10), null];
    if (this.scores[1] !== null) {
      return this.scoreText[1] = this.createScoreText(this, this.game.width / 2 + 16, 10);
    }
  };

  MainState.prototype.update = function() {
    this.game.physics.arcade.collide(this.ball.sprite, this.frameGroup);
    return this.game.physics.arcade.overlap(this.batGroup, this.ball.sprite, this.hitBat, null, this);
  };

  MainState.prototype.hitBat = function(batSprite, ballSprite) {
    var bat, batObject, i, len, ref;
    batObject = null;
    ref = this.bats;
    for (i = 0, len = ref.length; i < len; i++) {
      bat = ref[i];
      if (Math.abs(bat.x - batSprite.x) < 24) {
        batObject = bat;
      }
    }
    return console.log("Hit", batObject.sprite.x, batObject.sprite.y, batSprite.x, batSprite.y);
  };

  MainState.prototype.createScoreText = function(state, x, y) {
    return state.game.add.text(x, y, "00", {
      font: "96px Arial",
      fill: "#FFFFFF",
      align: "center"
    });
  };

  MainState.prototype.createFrame = function() {
    var edgeSize, frameSize, i, results, x;
    frameSize = 6;
    if (this.currentGame === PongGame.TENNIS || this.currentGame === PongGame.SOCCER) {
      this.createBox(this.game.width / 2 - frameSize / 2, 0, frameSize, this.game.height, false, true);
    }
    this.createWall(0, 0, this.game.width, frameSize);
    this.createWall(0, this.game.height - frameSize, this.game.width, frameSize);
    if (this.currentGame === PongGame.SQUASH || this.currentGame === PongGame.PRACTICE) {
      this.createWall(0, 0, frameSize, this.game.height);
    }
    if (this.currentGame === PongGame.SOCCER) {
      results = [];
      for (x = i = 0; i <= 1; x = ++i) {
        edgeSize = this.game.height * 0.45;
        this.createWall(x * (this.game.width - frameSize), 0, frameSize, edgeSize);
        results.push(this.createWall(x * (this.game.width - frameSize), this.game.height - edgeSize, frameSize, edgeSize));
      }
      return results;
    }
  };

  MainState.prototype.createBats = function() {
    switch (this.currentGame) {
      case PongGame.SOCCER:
        this.createBat(1, 32);
        this.createBat(1, this.game.width * 70 / 100);
        this.createBat(2, this.game.width - 32);
        return this.createBat(2, this.game.width * 30 / 100);
      case PongGame.TENNIS:
        this.createBat(1, 32);
        return this.createBat(2, this.game.width - 32);
      case PongGame.SQUASH:
        this.createBat(1, this.game.width * 3 / 4);
        return this.createBat(2, this.game.width * 3 / 4 + 32);
      case PongGame.PRACTICE:
        return this.createBat(1, this.game.width * 3 / 4);
    }
  };

  MainState.prototype.createBat = function(side, x) {
    var bat, h;
    if (this.batSize === 1) {
      h = this.game.height / 5;
    } else {
      h = this.game.height / 7;
    }
    bat = new Bat(this, side, x, this.game.height / 2, 10, h);
    console.log(bat.x);
    this.batGroup.add(bat.sprite);
    return this.bats.push(bat);
  };

  MainState.prototype.createWall = function(x, y, w, h) {
    var wall;
    wall = this.createBox(x, y, w, h, w > h);
    wall.body.immovable = true;
    return this.frameGroup.add(wall);
  };

  MainState.prototype.createBox = function(x, y, w, h, isDashed, isDecoration) {
    var box, newSprite, xDash;
    if (isDashed == null) {
      isDashed = false;
    }
    if (isDecoration == null) {
      isDecoration = false;
    }
    box = this.game.add.bitmapData(w, h);
    box.ctx.beginPath();
    box.ctx.rect(0, 0, w, h);
    box.ctx.fillStyle = "#FFFFFF";
    box.ctx.fill();
    if (isDashed) {
      xDash = 0;
      while (xDash < w) {
        xDash = xDash + 17;
        box.ctx.beginPath();
        box.ctx.rect(xDash, 0, 6, h);
        box.ctx.fillStyle = "#000000";
        box.ctx.fill();
        xDash = xDash + 6;
      }
    }
    newSprite = this.game.add.sprite(x, y, box);
    if (!isDecoration) {
      this.game.physics.arcade.enable(newSprite);
    }
    return newSprite;
  };

  return MainState;

})();

Bat = (function() {
  function Bat(state1, side1, x1, y1, w1, h1) {
    this.state = state1;
    this.side = side1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.sprite = this.state.createBox(this.x, this.y, this.w, this.h, false, false);
    this.sprite.anchor.setTo(0.5, 0.5);
  }

  return Bat;

})();

Ball = (function() {
  function Ball(state1) {
    this.state = state1;
    this.sprite = this.state.createBox(100, 100, 20, 20, false, false);
    this.sprite.anchor.setTo(0.5, 0.5);
    this.sprite.body.velocity.x = 300;
    this.sprite.body.velocity.y = 300;
    this.sprite.body.bounce.x = 1;
    this.sprite.body.bounce.y = 1;
  }

  return Ball;

})();

x = new PongGame();
