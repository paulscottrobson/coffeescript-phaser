// Generated by CoffeeScript 1.12.3
var Enemy, GameOverState, MainState, PhaserGame, Player, x,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PhaserGame = (function(superClass) {
  extend(PhaserGame, superClass);

  function PhaserGame() {
    PhaserGame.__super__.constructor.call(this, 500, 500);
    this.state.add('main', MainState);
    this.state.add("gameover", GameOverState);
    this.state.start('main');
  }

  return PhaserGame;

})(Phaser.Game);

MainState = (function() {
  function MainState() {}

  MainState.prototype.create = function() {
    var bottom, inner, inner1, left, right, top;
    console.log('create');
    this.game.stage.backgroundColor = "#BDC2C5";
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.world.enableBody = true;
    this.player = new Player(this);
    this.walls = this.game.add.group();
    this.walls.enableBody = true;
    top = this.walls.create(0, 0, this.box({
      length: this.game.world.width,
      width: 16,
      color: "#374A59"
    }));
    top.body.immovable = true;
    bottom = this.walls.create(0, this.game.world.height - 16, this.box({
      length: this.game.world.width,
      width: 16,
      color: "#374A59"
    }));
    bottom.body.immovable = true;
    left = this.walls.create(0, 0, this.box({
      length: 16,
      width: this.game.world.height,
      color: "#374A59"
    }));
    left.body.immovable = true;
    right = this.walls.create(this.game.world.width - 16, 0, this.box({
      length: 16,
      width: this.game.world.height,
      color: "#374A59"
    }));
    right.body.immovable = true;
    inner = this.walls.create(this.game.world.width / 4, 16, this.box({
      length: 16,
      width: this.game.world.height * 3 / 4,
      color: "#374A59"
    }));
    inner.body.immovable = true;
    inner1 = this.walls.create(this.game.world.width / 2, 128, this.box({
      length: 16,
      width: this.game.world.height * 3 / 4,
      color: "#374A59"
    }));
    inner1.body.immovable = true;
    return this.enemy = new Enemy(this);
  };

  MainState.prototype.update = function() {
    this.game.physics.arcade.overlap(this.player.sprite, this.enemy.sprite, this.handlePlayerDeath, null, this);
    return this.player.update();
  };

  MainState.prototype.handlePlayerDeath = function(player, enemy) {
    player.kill();
    console.log("killed");
    return this.game.state.start("gameover");
  };

  MainState.prototype.box = function(options) {
    var bmd;
    bmd = this.game.add.bitmapData(options.length, options.width);
    bmd.ctx.beginPath();
    bmd.ctx.rect(0, 0, options.length, options.width);
    bmd.ctx.fillStyle = options.color;
    bmd.ctx.fill();
    return bmd;
  };

  return MainState;

})();

Enemy = (function() {
  function Enemy(state) {
    this.state = state;
    this.sprite = this.state.game.add.sprite(200, 32, this.state.box({
      length: 32,
      width: 32,
      color: "#A96262"
    }));
  }

  return Enemy;

})();

Player = (function() {
  function Player(state) {
    this.state = state;
    this.sprite = this.state.game.add.sprite(32, 32, this.state.box({
      length: 32,
      width: 32,
      color: "#4F616E"
    }));
    this.cursor = this.state.game.input.keyboard.createCursorKeys();
    this.sprite.body.collideWorldBounds = true;
  }

  Player.prototype.update = function() {
    var speed;
    speed = 250;
    this.sprite.body.velocity.x = 0;
    this.sprite.body.velocity.y = 0;
    if (this.cursor.up.isDown) {
      this.sprite.body.velocity.y -= speed;
    }
    if (this.cursor.down.isDown) {
      this.sprite.body.velocity.y += speed;
    }
    if (this.cursor.left.isDown) {
      this.sprite.body.velocity.x -= speed;
    }
    if (this.cursor.right.isDown) {
      return this.sprite.body.velocity.x += speed;
    }
  };

  return Player;

})();

GameOverState = (function() {
  function GameOverState() {}

  GameOverState.prototype.create = function() {
    var label, msg;
    msg = "GAME OVER\nPress SPACE to restart";
    label = this.game.add.text(this.game.world.width / 2, this.game.world.height / 2, msg, {
      font: "22px Arial",
      fill: "#fff",
      align: "center"
    });
    label.anchor.setTo(0.5, 0.5);
    return this.spacebar = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  };

  GameOverState.prototype.update = function() {
    if (this.spacebar.isDown) {
      return this.game.state.start("main");
    }
  };

  return GameOverState;

})();

x = new PhaserGame();
